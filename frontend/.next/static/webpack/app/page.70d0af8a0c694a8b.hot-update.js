"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/process-dataset.ts":
/*!********************************!*\
  !*** ./lib/process-dataset.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFairnessResult: () => (/* binding */ getFairnessResult),\n/* harmony export */   getProcessedDataset: () => (/* binding */ getProcessedDataset),\n/* harmony export */   processDataset: () => (/* binding */ processDataset),\n/* harmony export */   setProcessedDataset: () => (/* binding */ setProcessedDataset),\n/* harmony export */   uploadDatasetToBackend: () => (/* binding */ uploadDatasetToBackend)\n/* harmony export */ });\n/**\n * Real CSV processing implementation\n */ // Function to detect if a column might be a protected attribute\nfunction analyzeColumnForProtectedAttributes(columnName, values) {\n    const name = columnName.toLowerCase();\n    // Known protected attribute patterns\n    const protectedPatterns = [\n        {\n            pattern: /gender|sex/,\n            confidence: 0.95,\n            risk: \"high\"\n        },\n        {\n            pattern: /age|birth|dob/,\n            confidence: 0.92,\n            risk: \"high\"\n        },\n        {\n            pattern: /race|ethnic|nationality/,\n            confidence: 0.98,\n            risk: \"high\"\n        },\n        {\n            pattern: /religion|faith/,\n            confidence: 0.9,\n            risk: \"high\"\n        },\n        {\n            pattern: /disability|handicap/,\n            confidence: 0.88,\n            risk: \"high\"\n        },\n        {\n            pattern: /marital|marriage/,\n            confidence: 0.85,\n            risk: \"medium\"\n        },\n        {\n            pattern: /zip|postal|address/,\n            confidence: 0.75,\n            risk: \"medium\"\n        },\n        {\n            pattern: /income|salary|wage/,\n            confidence: 0.8,\n            risk: \"medium\"\n        },\n        {\n            pattern: /education|degree/,\n            confidence: 0.7,\n            risk: \"medium\"\n        }\n    ];\n    for (const { pattern, confidence, risk } of protectedPatterns){\n        if (pattern.test(name)) {\n            return {\n                isProtected: true,\n                confidence,\n                riskLevel: risk\n            };\n        }\n    }\n    // Check values for potential protected attribute indicators\n    const uniqueValues = [\n        ...new Set(values.slice(0, 100))\n    ].map((v)=>v === null || v === void 0 ? void 0 : v.toString().toLowerCase());\n    // Gender indicators\n    if (uniqueValues.some((v)=>[\n            \"male\",\n            \"female\",\n            \"m\",\n            \"f\",\n            \"man\",\n            \"woman\"\n        ].includes(v))) {\n        return {\n            isProtected: true,\n            confidence: 0.9,\n            riskLevel: \"high\"\n        };\n    }\n    // Age indicators (numeric ranges that look like ages)\n    const numericValues = values.filter((v)=>!isNaN(Number(v))).map(Number);\n    if (numericValues.length > 0) {\n        const min = Math.min(...numericValues);\n        const max = Math.max(...numericValues);\n        if (min >= 16 && max <= 100 && max - min > 10) {\n            return {\n                isProtected: true,\n                confidence: 0.85,\n                riskLevel: \"high\"\n            };\n        }\n    }\n    return {\n        isProtected: false,\n        confidence: 0.1,\n        riskLevel: \"low\"\n    };\n}\n// Function to determine column data type\nfunction detectColumnType(values) {\n    const nonEmptyValues = values.filter((v)=>v !== null && v !== undefined && v !== \"\");\n    if (nonEmptyValues.length === 0) return \"unknown\";\n    // Check if all values are numeric\n    const numericValues = nonEmptyValues.filter((v)=>!isNaN(Number(v)));\n    if (numericValues.length / nonEmptyValues.length > 0.8) {\n        return \"numerical\";\n    }\n    // Check if values look like dates\n    const dateValues = nonEmptyValues.filter((v)=>!isNaN(Date.parse(v)));\n    if (dateValues.length / nonEmptyValues.length > 0.8) {\n        return \"date\";\n    }\n    // Check if boolean-like\n    const booleanValues = nonEmptyValues.filter((v)=>[\n            \"true\",\n            \"false\",\n            \"yes\",\n            \"no\",\n            \"1\",\n            \"0\",\n            \"y\",\n            \"n\"\n        ].includes(v.toLowerCase()));\n    if (booleanValues.length / nonEmptyValues.length > 0.8) {\n        return \"boolean\";\n    }\n    return \"categorical\";\n}\n// Parse CSV content\nfunction parseCSV(csvContent) {\n    const lines = csvContent.split(\"\\n\").filter((line)=>line.trim());\n    if (lines.length === 0) throw new Error(\"Empty CSV file\");\n    // Parse headers\n    const headers = lines[0].split(\",\").map((h)=>h.trim().replace(/\"/g, \"\"));\n    // Parse rows\n    const rows = lines.slice(1).map((line)=>{\n        return line.split(\",\").map((cell)=>cell.trim().replace(/\"/g, \"\"));\n    });\n    return {\n        headers,\n        rows\n    };\n}\nasync function processDataset(file) {\n    return new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onload = (e)=>{\n            try {\n                var _e_target;\n                const content = (_e_target = e.target) === null || _e_target === void 0 ? void 0 : _e_target.result;\n                const startTime = Date.now();\n                // Parse the CSV\n                const { headers, rows } = parseCSV(content);\n                // Analyze each column\n                const identifiedAttributes = headers.map((header, index)=>{\n                    const columnValues = rows.map((row)=>row[index] || \"\").filter((v)=>v !== \"\");\n                    const uniqueValues = [\n                        ...new Set(columnValues)\n                    ].slice(0, 10);\n                    const type = detectColumnType(columnValues);\n                    const { isProtected, confidence, riskLevel } = analyzeColumnForProtectedAttributes(header, columnValues);\n                    let range = \"\";\n                    if (type === \"numerical\") {\n                        const numbers = columnValues.map(Number).filter((n)=>!isNaN(n));\n                        if (numbers.length > 0) {\n                            range = \"\".concat(Math.min(...numbers), \" - \").concat(Math.max(...numbers));\n                        }\n                    }\n                    return {\n                        name: header,\n                        type,\n                        uniqueValues: type === \"categorical\" ? uniqueValues : undefined,\n                        range: type === \"numerical\" ? range : undefined,\n                        confidence,\n                        examples: uniqueValues.slice(0, 3),\n                        isProtected,\n                        riskLevel,\n                        sampleCount: columnValues.length\n                    };\n                });\n                const processingTime = ((Date.now() - startTime) / 1000).toFixed(1);\n                // Create preview data (first 5 rows)\n                const preview = rows.slice(0, 5).map((row)=>{\n                    const obj = {};\n                    headers.forEach((header, index)=>{\n                        obj[header] = row[index] || \"\";\n                    });\n                    return obj;\n                });\n                resolve({\n                    success: true,\n                    message: \"Dataset processed successfully with real data analysis\",\n                    data: {\n                        rowCount: rows.length,\n                        columnCount: headers.length,\n                        columns: headers,\n                        identifiedAttributes,\n                        processingTime: \"\".concat(processingTime, \" seconds\"),\n                        aiConfidence: 0.94,\n                        preview\n                    }\n                });\n            } catch (error) {\n                reject(new Error(\"Failed to process CSV: \".concat(error)));\n            }\n        };\n        reader.onerror = ()=>{\n            reject(new Error(\"Failed to read file\"));\n        };\n        reader.readAsText(file);\n    });\n}\n// Store processed data globally (in a real app, you'd use proper state management)\nlet processedDatasetCache = null;\nfunction setProcessedDataset(data) {\n    processedDatasetCache = data;\n}\nfunction getProcessedDataset() {\n    return processedDatasetCache;\n}\n// Store fairness results from the backend\nlet fairnessResultCache = null;\nasync function uploadDatasetToBackend(file) {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    const res = await fetch(\"http://localhost:8000/fairness-check\", {\n        method: \"POST\",\n        body: formData\n    });\n    if (!res.ok) {\n        throw new Error(\"Failed to upload dataset to backend\");\n    }\n    const data = await res.json();\n    fairnessResultCache = data;\n    return data;\n}\nfunction getFairnessResult() {\n    return fairnessResultCache;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/process-dataset.ts\n"));

/***/ })

});